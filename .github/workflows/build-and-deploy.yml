name: 构建与部署

on:
  push:
    tags: [ 'v*' ]


jobs:
  build:
    name: 构建应用
    runs-on: ubuntu-latest

    steps:
      - name: 检出代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # 获取完整的历史记录用于版本号生成

      - name: 设置 Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: 安装 pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 8.x
          run_install: false

      - name: 获取 pnpm 缓存目录
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - name: 设置缓存
        uses: actions/cache@v4
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: 安装依赖
        run: pnpm install

      - name: 代码检查
        run: pnpm run lint

      - name: 类型检查
        run: pnpm run type-check

      - name: 复制 CI 环境变量文件
        run: cp .env.ci .env.production

      - name: 构建应用
        run: pnpm run build
        env:
          NODE_ENV: production

      - name: 上传构建产物
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist
          retention-days: 7

  docker:
    name: 构建Docker镜像
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name != 'pull_request'

    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 下载构建产物
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist

      - name: 设置 Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 登录到 Docker Hub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: 提取元数据
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.DOCKERHUB_USERNAME }}/heygem
          tags: |
            type=ref,event=branch
            type=ref,event=tag
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,format=short

      - name: 构建并推送 Docker 镜像
        uses: docker/build-push-action@v5
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          # 使用自定义的Dockerfile构建生产镜像
          file: ./Dockerfile

  release:
    name: 创建版本发布
    runs-on: ubuntu-latest
    needs: docker
    if: startsWith(github.ref, 'refs/tags/v')

    steps:
      - name: 检出代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 下载构建产物
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist

      - name: 打包构建产物
        run: |
          zip -r dist.zip dist

      - name: 获取版本号
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: 创建版本发布
        uses: softprops/action-gh-release@v2
        with:
          name: HeyGem.ai ${{ steps.get_version.outputs.VERSION }}
          files: |
            dist.zip
            LICENSE
          body: |
            ## HeyGem.ai ${{ steps.get_version.outputs.VERSION }} 发布

            ### Docker 镜像
            ```
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/heygem:${{ steps.get_version.outputs.VERSION }}
            ```

            ### 更新内容
            请查看 [CHANGELOG](https://github.com/${{ github.repository }}/blob/main/CHANGELOG.md) 了解详情。
          draft: false
          prerelease: false
